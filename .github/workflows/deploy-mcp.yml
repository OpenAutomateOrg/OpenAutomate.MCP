name: Deploy MCP Server to AWS App Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy-mcp:
    name: Build and Deploy MCP Server
    runs-on: ubuntu-latest
    environment: production

    steps:
    # Checkout repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup Python
    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Configure AWS credentials using OIDC
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::961341552373:role/GithubAction
        aws-region: ap-southeast-1

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Create ECR repository if it doesn't exist
    - name: Create ECR repository
      run: |
        aws ecr describe-repositories --repository-names openautomate-mcp --region ap-southeast-1 || \
        aws ecr create-repository --repository-name openautomate-mcp --region ap-southeast-1

    # Build, tag, and push image to Amazon ECR
    - name: Build, tag, and push MCP image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: openautomate-mcp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR (no cd needed - we're in repo root)
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Create App Runner service role
    - name: Create App Runner service role
      run: |
        echo "Creating App Runner service role..."
        aws iam create-role \
          --role-name AppRunnerECRAccessRole \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "build.apprunner.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }' || echo "Role already exists, continuing..."

        aws iam attach-role-policy \
          --role-name AppRunnerECRAccessRole \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess || echo "Policy already attached, continuing..."

        echo "Waiting for role to be ready..."
        sleep 10

    # Deploy to AWS App Runner with proper state handling
    - name: Deploy to AWS App Runner
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: openautomate-mcp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Check if App Runner service exists and get its status
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='openautomate-mcp-service'].ServiceArn" --output text --region ap-southeast-1)

        if [ -z "$SERVICE_ARN" ]; then
          echo "Creating new App Runner service..."
          aws apprunner create-service \
            --service-name openautomate-mcp-service \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "OPENAUTOMATE_API_BASE_URL": "https://api.openautomate.io",
                    "PORT": "8000",
                    "HOST": "0.0.0.0",
                    "UVICORN_HOST": "0.0.0.0",
                    "UVICORN_PORT": "8000"
                  }
                },
                "ImageRepositoryType": "ECR"
              },
              "AuthenticationConfiguration": {
                "AccessRoleArn": "arn:aws:iam::961341552373:role/AppRunnerECRAccessRole"
              },
              "AutoDeploymentsEnabled": true
            }' \
            --instance-configuration '{
              "Cpu": "1 vCPU",
              "Memory": "2 GB"
            }' \
            --health-check-configuration '{
              "Protocol": "HTTP",
              "Path": "/sse",
              "Interval": 10,
              "Timeout": 5,
              "HealthyThreshold": 1,
              "UnhealthyThreshold": 5
            }' \
            --region ap-southeast-1
        else
          echo "App Runner service exists. Checking status..."
          SERVICE_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text --region ap-southeast-1)
          echo "Current service status: $SERVICE_STATUS"

          case $SERVICE_STATUS in
            "RUNNING")
              echo "‚úÖ Service is running. Starting deployment..."
              aws apprunner start-deployment \
                --service-arn $SERVICE_ARN \
                --region ap-southeast-1
              ;;
            "CREATE_FAILED"|"DELETE_FAILED"|"UPDATE_FAILED_ROLLBACK_COMPLETE")
              echo "‚ùå Service is in failed state ($SERVICE_STATUS). Deleting and recreating..."
              aws apprunner delete-service \
                --service-arn $SERVICE_ARN \
                --region ap-southeast-1

              echo "‚è≥ Waiting for service deletion (60 seconds)..."
              sleep 60

              echo "üîÑ Creating new service..."
              aws apprunner create-service \
                --service-name openautomate-mcp-service \
                --source-configuration '{
                  "ImageRepository": {
                    "ImageIdentifier": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
                    "ImageConfiguration": {
                      "Port": "8000",
                      "RuntimeEnvironmentVariables": {
                        "OPENAUTOMATE_API_BASE_URL": "https://api.openautomate.io",
                        "PORT": "8000",
                        "HOST": "0.0.0.0",
                        "UVICORN_HOST": "0.0.0.0",
                        "UVICORN_PORT": "8000"
                      }
                    },
                    "ImageRepositoryType": "ECR"
                  },
                  "AuthenticationConfiguration": {
                    "AccessRoleArn": "arn:aws:iam::961341552373:role/AppRunnerECRAccessRole"
                  },
                  "AutoDeploymentsEnabled": true
                }' \
                --instance-configuration '{
                  "Cpu": "1 vCPU",
                  "Memory": "2 GB"
                }' \
                --health-check-configuration '{
                  "Protocol": "HTTP",
                  "Path": "/sse",
                  "Interval": 10,
                  "Timeout": 5,
                  "HealthyThreshold": 1,
                  "UnhealthyThreshold": 5
                }' \
                --region ap-southeast-1
              ;;
            "CREATING"|"UPDATING"|"DELETING"|"PAUSED"|"OPERATION_IN_PROGRESS")
              echo "‚è≥ Service is in transitional state ($SERVICE_STATUS). Waiting..."

              # Wait for service to reach a stable state (max 5 minutes)
              for i in {1..30}; do
                sleep 10
                NEW_STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text --region ap-southeast-1 2>/dev/null || echo "DELETED")
                echo "Status check $i/30: $NEW_STATUS"

                case $NEW_STATUS in
                  "RUNNING")
                    echo "‚úÖ Service is now running. Starting deployment..."
                    aws apprunner start-deployment \
                      --service-arn $SERVICE_ARN \
                      --region ap-southeast-1
                    break
                    ;;
                  "CREATE_FAILED"|"DELETE_FAILED"|"UPDATE_FAILED_ROLLBACK_COMPLETE"|"DELETED")
                    echo "‚ùå Service failed or was deleted. Will recreate..."
                    # Service will be recreated in next run
                    exit 1
                    ;;
                  "PAUSED")
                    echo "‚ñ∂Ô∏è Service is paused. Resuming..."
                    aws apprunner resume-service \
                      --service-arn $SERVICE_ARN \
                      --region ap-southeast-1
                    ;;
                esac

                if [ $i -eq 30 ]; then
                  echo "‚è∞ Timeout waiting for service to become ready. Current status: $NEW_STATUS"
                  exit 1
                fi
              done
              ;;
            *)
              echo "‚ùì Unknown service status: $SERVICE_STATUS"
              echo "Manual intervention may be required."
              exit 1
              ;;
          esac
        fi

    # Wait for deployment to complete and verify health
    - name: Wait for deployment and verify health
      run: |
        echo "‚è≥ Waiting for App Runner deployment to complete..."

        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='openautomate-mcp-service'].ServiceArn" --output text --region ap-southeast-1)

        if [ ! -z "$SERVICE_ARN" ]; then
          echo "üìã Service ARN: $SERVICE_ARN"

          # Wait for service to be running (max 10 minutes)
          echo "‚è≥ Waiting for service to be RUNNING..."
          for i in {1..60}; do
            STATUS=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.Status" --output text --region ap-southeast-1)
            echo "Status check $i/60: $STATUS"

            if [ "$STATUS" = "RUNNING" ]; then
              echo "‚úÖ Service is running!"
              break
            elif [[ "$STATUS" =~ ^(CREATE_FAILED|DELETE_FAILED|UPDATE_FAILED).*$ ]]; then
              echo "‚ùå Service deployment failed with status: $STATUS"

              # Get operation details for debugging
              OPERATION_ID=$(aws apprunner list-operations --service-arn $SERVICE_ARN --query "OperationSummaryList[0].Id" --output text --region ap-southeast-1)
              if [ ! -z "$OPERATION_ID" ] && [ "$OPERATION_ID" != "None" ]; then
                echo "üîç Latest operation details:"
                aws apprunner describe-operation --operation-arn $OPERATION_ID --region ap-southeast-1 --query "Operation.{Status:Status,Type:Type,StartedAt:StartedAt,EndedAt:EndedAt}" --output table
              fi
              exit 1
            fi

            sleep 10
          done

          if [ $i -eq 60 ]; then
            echo "‚è∞ Timeout waiting for service to be running"
            exit 1
          fi

          # Get service details
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text --region ap-southeast-1)

          echo ""
          echo "üéâ =================================="
          echo "üéâ MCP Server Deployed Successfully!"
          echo "üéâ =================================="
          echo "üåê Service URL: https://$SERVICE_URL"
          echo "‚ù§Ô∏è Health Check: https://$SERVICE_URL/sse"
          echo "üîó MCP Endpoint: https://$SERVICE_URL/sse"
          echo "üìä Status: RUNNING"
          echo ""

          # Test health endpoint
          echo "üîç Testing health endpoint..."
          if curl -f -s "https://$SERVICE_URL/sse" > /dev/null; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ö†Ô∏è Health check failed, but service is running"
          fi

        else
          echo "‚ùå No service found after deployment"
          exit 1
        fi
